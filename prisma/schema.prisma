generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums 

enum UserRole {
  SUPER_ADMIN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ProductImageType {
  PRIMARY
  SECONDARY
  EXTRA
}

enum DiscountType {
  PERCENTAGE
  FLAT
}

enum OrderStatus {
  PLACED
  CONFIRMED
  SHIPPED
  PENDING
  DELIVERED
  CANCELLED
}

enum PlatformOrder {
  WEBSITE
  FACEBOOK
  WHATSAPP
  INSTAGRAM
  PHONE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  PARTIAL
  FAILED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
}

enum SizeStatus {
  PUBLISHED
  UNPUBLISHED
}

enum NotificationType {
  ORDER
  PAYMENT
  PRODUCT
  USER
}

// Start Prisma Schema

model User {
  id                   String     @id @default(uuid())
  email                String     @unique
  password             String
  role                 UserRole   @default(CUSTOMER)
  status               UserStatus @default(ACTIVE)
  is_deleted           Boolean    @default(false)
  need_password_change Boolean    @default(false)
  profile              Profile?
  created_at           DateTime   @default(now())
  updated_at           DateTime   @updatedAt

  @@map("users")
}

model Profile {
  id         String   @id @default(uuid())
  user_id    String   @unique
  name       String
  email      String   @unique
  phone      String
  image      String?  @default("https://res.cloudinary.com/dl5rlskcv/image/upload/v1735927163/default_user_b2vftf.png")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("profiles")
}

model Category {
  id                 String             @id @default(uuid())
  parent_category_id String?
  name               String
  slug               String             @unique
  image              String?            @default("https://res.cloudinary.com/dl5rlskcv/image/upload/v1735927163/default-category_xehkv7.jpg")
  is_published       Boolean            @default(false)
  sub_categories     Category[]         @relation("CategoryToCategory")
  featured_category  FeaturedCategory[]
  parent_category    Category?          @relation("CategoryToCategory", fields: [parent_category_id], references: [id], onDelete: Cascade)
  product            Product[]
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt

  @@map("categories")
}

model Size {
  id         String           @id @default(uuid())
  name       String
  slug       String           @unique
  is_deleted Boolean          @default(false)
  status     SizeStatus       @default(PUBLISHED)
  variants   ProductVariant[]
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@map("sizes")
}

model Product {
  id                 String           @id @default(uuid())
  category_id        String
  name               String
  sku                String           @unique
  slug               String           @unique
  short_description  String?
  full_description   String?
  delivery_policy    String?
  youtube_video_link String?
  buy_price          Float
  cost_price         Float
  sell_price         Float
  discount           Float            @default(0)
  discount_type      DiscountType     @default(PERCENTAGE)
  is_published       Boolean          @default(false)
  is_deleted         Boolean          @default(false)
  category           Category         @relation(fields: [category_id], references: [id], onDelete: Cascade)
  images             ProductImage[]
  variants           ProductVariant[]
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt

  @@map("products")
}

model ProductImage {
  id         String           @id @default(uuid())
  product_id String
  image_url  String?          @default("https://res.cloudinary.com/dl5rlskcv/image/upload/v1735927164/default-product_o9po6f.jpg")
  type       ProductImageType @default(EXTRA)
  product    Product          @relation(fields: [product_id], references: [id], onDelete: Cascade)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@map("product_images")
}

model ProductVariant {
  id         String   @id @default(uuid())
  product_id String
  size_id    String?
  stock      Int      @default(0)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  size       Size?    @relation(fields: [size_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("product_variants")
}

model Order {
  id              String        @id @default(uuid())
  order_id        String        @unique
  user_id         String
  customer_name   String
  email           String
  phone           String
  is_inside_dhaka Boolean       @default(true)
  address_line    String
  note            String?
  subtotal        Float?
  delivery_charge Float?
  grand_total     Float?
  status          OrderStatus   @default(PLACED)
  platform        PlatformOrder @default(WEBSITE)
  reference_link  String?
  payment         Payment?
  products        OrderItem[]
  notification    Notification?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@map("orders")
}

model OrderItem {
  id            String       @id @default(uuid())
  order_id      String?
  product_id    String
  variant_id    String
  product_name  String
  product_price Float
  product_size  String?
  quantity      Int
  discount      Float
  discount_type DiscountType
  total_price   Float
  order         Order?       @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt

  @@map("order_items")
}

model Payment {
  id             String         @id @default(uuid())
  order_id       String         @unique
  payment_method PaymentMethod  @default(CASH_ON_DELIVERY)
  payable_amount Float?
  status         PaymentStatus? @default(PENDING)
  order          Order          @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@map("payments")
}

model Notification {
  id         String           @id @default(uuid())
  type       NotificationType @default(ORDER)
  order_id   String?          @unique
  is_read    Boolean          @default(false)
  order      Order?           @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@map("notifications")
}

model Banner {
  id         String   @id @default(uuid())
  image_url  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("banners")
}

model FeaturedCategory {
  id                 String   @id @default(uuid())
  category_id        String   @unique
  title              String
  banner_url         String?
  youtube_video_link String?
  sort_order         Int?
  is_published       Boolean  @default(true)
  category           Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  @@map("featured_categories")
}
